{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p>In today's digital age, where Linux powers a significant portion of internet servers, prioritizing the security of Linux systems is crucial in preventing cyber-attacks and data breaches. This Practical Linux, Security, and Hardening project guide individuals seeking to implement security measures and best practices to secure and harden their Linux systems.</p> <p>This guide is based on OpenSCAP configurations, including the U.S. Government Commercial Cloud Services (C2S) baseline inspired by CIS v2.1.1, C2S for Red Hat Enterprise Linux 7 v0.1.43, and the Red Hat Enterprise Linux 7 Security Technical Implementation Guide (STIG). In addition, these configurations are derived from NIST 800-53 and related documents.</p> <p>This project provides valuable insights into how attackers can breach Linux systems when they have physical access and various countermeasures to safeguard against such attacks. It also covers the authentication systems utilized in Linux, including creating strong passwords and managing account and password expirations for different account types.</p> <p>The networking section of the project offers guidance on securing network services running on Linux systems and configuring the local firewall. Furthermore, the project delves into Linux file system security, including permissions, special modes, file attributes, and ACLs, to ensure adequate protection against data breaches.</p> <p>Lastly, the project emphasizes the importance of staying up-to-date with the latest security concerns for your Linux distribution and continuing your security education.</p> <p>Overall, this technical project provides a comprehensive guide to securing and hardening a Linux system using various techniques and tools based on OpenSCAP configurations. By implementing these security measures and best practices, users can reduce vulnerability to attacks and ensure better protection against data breaches.</p>"},{"location":"1-securing-the-bool-loader-%28GRUB%29/","title":"Securing the Boot Loader (GRUB)","text":"<p>This section demonstrates how to secure the boot loader. When a computer boots up, the BIOS executes the first code, which performs a Power-On Self-Test before executing the code in the Master Boot Record sector of the disk where the boot loader is located. The boot loader then loads the kernel, which initializes the entire system.</p> <p>GRUB 2 is the default boot loader for major Linux distributions, and a hacker could exploit it to boot the system into Single User Mode or change its configuration. To prevent such security threats, it's essential to protect the GRUB bootloader password. Note that physical access to the computer can bypass GRUB's security measures.</p> <p>Another potential security vulnerability is booting the system from another medium, such as a USB stick. To address this, set up a BIOS password and configure the system to boot automatically from the partition on which Linux is installed.</p> <p>It's worth emphasizing that the first layer of security to consider is physical security.</p> <ol> <li>To require a password for the GRUB boot loader to start the system, it is necessary to generate a hashed password.</li> </ol> <pre><code>grub-mkpasswd-pbkdf2\n</code></pre> <p></p> <ol> <li>After generating the hashed password, the next step is to add the hash to the GRUB main configuration file by editing it.  However, the file is not directly modified by the user It gets overwritten by certain GRUB updates whenever a kernel is added or removed or when the user runs the <code>update-grub2</code> command. This method ensures that the actual password is not visible in the GRUB scripts, which prevents a possible hacker from accessing it. The GRUB2 main configuration file is located at <code>/boot/grub/grub.cfg</code> To view the configuration files, use:</li> </ol> <pre><code>cat /boot/grub/grub.cfg\n</code></pre> <p>Instead, GRUB uses a series of scripts located in <code>/etc/grub.d</code> directory to build the configuration file. </p> <pre><code>ls **/etc/grub.d**\n</code></pre> <p></p> <p>Modify the files in this directory, and then run the <code>update-grub2</code> command. Based on the contents of these files, <code>update-grub2</code> will generate the <code>grub.cfg</code> file. Alternatively, you can modify a custom file such as <code>40_custom</code>, which won't get overwritten even when the GRUB package is updated.</p> <pre><code>sudo vim /etc/grub.d/40_custom\n</code></pre> <p>Copy the generated hash password <code>grub.pbkdf2.sha512.10000.BF07F4A46F7504580CB5C702EDA775486C39A2D28F362B2321CD5760D50214C1EA0C56390D43CF9875D3A31FBD321827E68BFB789CC0239FB71E8655A8161380.58F1D7AE611189AC05E7D584BEBD768AE9CA38C6BB29B28A39C81C4760952315CEF892767F9078EC5B22F9BE774F5206705F1CFA57825A5EB81841C373F53609</code></p> <p>Add new lines to the <code>40_custom</code> file the save and exit:</p> <pre><code>set superusers=\"root\"\npassword_pbkdf2 root grub.pbkdf2.sha512.10000.BF07F4A46F7504580CB5C702EDA775486C39A2D28F362B2321CD5760D50214C1EA0C56390D43CF9875D3A31FBD321827E68BFB789CC0239FB71E8655A8161380.58F1D7AE611189AC05E7D584BEBD768AE9CA38C6BB29B28A39C81C4760952315CEF892767F9078EC5B22F9BE774F5206705F1CFA57825A5EB81841C373F53609\n</code></pre> <p></p> <p>Update the grub configuration file.</p> <pre><code>sudo update-grub2\n</code></pre> <p></p> <p>View the content of <code>/boot/grub/grub.cfg</code></p> <pre><code>ls /boot/grub/grub.cfg\n</code></pre> <p>Reboot the Linux system to verify grub is requesting a password to boot into the Linux OS. The username is <code>root</code>, and the password is <code>********</code>, the same as the one used to generate the GRUB hash. Physical access to the Linux server is required to input the password if a barebone metal is used as the server.</p> <pre><code>sudo reboot\n</code></pre>"},{"location":"2-securing-the-openssh-server/","title":"Securing the OpenSSH Server","text":"<p>Secure remote access is essential for many organizations, and SSH has become the de-facto standard for this purpose. However, a default SSH installation may not be the most secure option, leaving the server vulnerable to cyber attacks. Fortunately, a few simple steps can dramatically improve SSH security.</p> <p>In this project, we will show you how to secure the open ssh server, enhancing its security and protecting against unauthorized access.</p> <ol> <li> <p>Install <code>OpenSSH</code> client</p> <pre><code>sudo apt update &amp;&amp; sudo apt install openssh-server openssh-client </code></pre> </li> <li> <p>Connect to the server using <code>ssh -p 22 username@server_ip</code>. For example, conecting with username <code>muritala</code> , IP address <code>192.168.10.23</code>, and port <code>22</code></p> <pre><code>ssh -p 22 muritala@192.168.10.23\n</code></pre> </li> <li> <p>Controlling the <code>SSHd</code> daemon to check its status, stopping, restarting, and enabling at boot time.</p> <p>Check <code>ssh</code>status</p> <pre><code>sudo systemctl status ssh\n</code></pre> <p>Stop <code>ssh</code></p> <pre><code>sudo systemctl stop ssh\n</code></pre> <p>Restart <code>ssh</code></p> <pre><code>sudo systemctl restart ssh\n</code></pre> <p>Enable <code>ssh</code> at boot</p> <pre><code>sudo systemctl enable ssh\n</code></pre> </li> <li> <p>The server configuration file is located in <code>/etc/ssh/</code>, and it\u2019s called <code>sshd_config</code></p> <pre><code>ls -l /etc/ssh/\n</code></pre> <p></p> </li> <li> <p>To enhance security, using a non-standard port such as <code>2279</code> for the Linux server as the default port; attackers commonly target port <code>22</code>. However, it is essential to note that using a non-standard port alone is not enough to secure the server as it is considered a form of security through obscurity. Changing the port does not provide complete protection as determined hackers can still scan all ports using tools like <code>nmap</code>. Nonetheless, a non-standard port is highly recommended, as it can deter automated attacks on the Linux server. To implement changes related to the server, you need to edit the <code>sshd_config</code> file and restart the server for the changes to take effect. </p> <pre><code>sudo vim /etc/ssh/sshd_config\n</code></pre> <p>Type <code>i</code> to switch into insert mode in <code>vim</code>, <code>esc,</code> and<code>:wq</code> to save and exit your file. Uncomment <code>#</code>each line with changes to apply non-default settings.</p> <p></p> </li> <li> <p>Direct login as root through <code>ssh</code> is a system's most dangerous security vulnerability. Even with a strong root password, there is always a possibility that a hacker can find it using brute force attacks. Avoiding direct root login via <code>ssh</code> is recommended to mitigate this risk. Instead, log in as a regular user and use the <code>sudo</code> or <code>su</code> commands to run commands as root when necessary. This approach improves the system\u2019s overall security and reduces the likelihood of successful attacks. Search for <code>PermitRootlogin</code> to verify it is disabled by default and change it from <code>prohibit-password</code> to <code>no</code>.</p> <p></p> </li> <li> <p>Limiting <code>ssh</code> access for users who do not require remote system access can greatly improve the system's overall security. By default, all system users can log in via SSH using their password or public key, which increases the risk of unauthorized access. Adding the <code>AllowUsers</code> option to the <code>sshd_config</code> file and specifying a list of allowed users can limit the impact of a weak password, enhancing the system's overall security. It is important to note that the <code>AllowUsers</code> option may not be present in the <code>sshd_config</code> file by default and must be added manually. Add <code>muritala</code> as the only permitted <code>ssh</code> user.</p> <p></p> </li> <li> <p>To further enhance the system\u2019s security, it is advisable to restrict access to the <code>ssh</code> port only from a limited list of source IP addresses. This can be achieved by configuring the firewall rules, <code>iptables</code> to permit connections only from the known IP addresses of the system administrators who require remote access. This approach limits the risk of unauthorized access to the system, particularly in cases where the source IP address is <code>static</code>. In situations where the source IP address is <code>dynamic</code> or subject to change, permitting access to the entire network may be necessary to prevent disruptions to remote access.</p> <p>Configuring the <code>iptables</code> to only allow remote connection from <code>ssh</code> port <code>2279</code> and IP address <code>192.168.10.22</code></p> <pre><code>sudo iptables -A INPUT -p tcp --dport 2279 -s 192.168.10.22 -j ACCEPT\n</code></pre> <p>Drop all other <code>ssh</code> connections to the Linux system using:</p> <pre><code>sudo iptables -A INPUT -p tcp --dport 2279 -j DROP\n</code></pre> </li> <li> <p>By default, the latest versions of OpenSSH use SSH protocol version 2, so there's no need to change anything. However, it's advisable to configure an <code>idle timeout interval.</code> Set <code>ClientAliveInterval</code> to <code>300</code> and <code>ClientAliveountMax</code> to <code>0</code> and remove the comment <code>#</code></p> <p></p> </li> <li> <p>Public key authentication must be set between the client and server by generating an <code>ssh-id</code> before activating public key Authentication by setting it to <code>yes</code> and Disable Password Authentication by setting it to <code>no</code>. Remember to remove the comment <code>#</code></p> <p></p> </li> </ol>"},{"location":"3-enforcing-password-policy/","title":"Enforcing Password Policy","text":"<p>Let's discuss the implementation of password policies in Linux, as the security of the system heavily relies on the strength of user passwords. A password policy comprises a set of regulations that users must adhere to. Typically, these rules outline the password's expiration duration, length, complexity, the maximum number of login attempts, and whether it's acceptable to reuse previous passwords. The settings for password aging and length are crucial components of password policies.</p> <ol> <li> <p>Modify password settings:</p> <pre><code>sudo vim /etc/login.defs\n</code></pre> <p></p> <p>Add a new line, <code>PASS_MIN_LEN    10</code> below the <code>PASS_WARN_AGE</code></p> <p></p> </li> <li> <p>Add a  new user with a username <code>test</code>, set password <code>**********,</code> the password to expire in 90 days, and list the user password expiration details.</p> <pre><code>sudo useradd -m -d /home/test -s /bin/bash test &amp;&amp; sudo passwd test &amp;&amp; sudo chage -M 90 test &amp;&amp; sudo chage -l test\n</code></pre> <p></p> </li> <li> <p>Typically, a strong password should contain a blend of uppercase letters, lowercase letters, numbers, and special characters, and its length should be no less than ten characters. Pluggable Authentication Modules (PAM) enforce password complexity across many Linux distributions. The configuration file for this purpose is located at <code>/etc/pam.d/common-password</code> in Ubuntu</p> <pre><code>ls -l /etc/pam.d/common-password\n</code></pre> <p></p> <pre><code>sudo apt install libpam-pwquality\n</code></pre> <p>Install PAM package:</p> <p>Open the <code>common-password</code> file in <code>vim</code> and locate <code>password requisite pam_pwquality.so retry=3</code> line.</p> <pre><code>sudo vim /etc/pam.d/common-password\n</code></pre> <p></p> <p>Add the following attributes <code>minlen=8 diffok=3 ucredit=-1 lcredit=-1 dcredit=-1 ocredit=-1</code> to the line. These parameters enforce specific password requirements. The <code>retry=3</code> attribute prompts the user three times before exiting and generating an error. The <code>minlen=8</code> attribute specifies that the password must be at least eight characters long. <code>difok=3</code> mandates that the new password can have a maximum of three characters different from the old password. The <code>ucredit=-1</code> option requires the inclusion of at least one uppercase character in the password, while the <code>lcredit=-1</code> option necessitates at least one lowercase character. Using the <code>dcredit=-1</code> option implies that the password must include at least one numeric character, while the <code>ocredit=-1</code> option requires including at least one special character.</p> <p></p> <p>login as user <code>test</code></p> <pre><code>su test\n</code></pre> <p>Verify the password complexity is working and Change the password</p> <pre><code>passwd\n</code></pre> <p></p> </li> </ol>"}]}